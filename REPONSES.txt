
SEMAINE 1:
    P1.1 :  
    - Nous avons décidé de représenter nos vecteurs avec... ...des vecteurs. Pour nous, cette approche est la meilleure, car elle permet une gestion non seulement la plus facile, mais elle est aussi très bien adaptée à un changement dans un autre système de dimensions.
    - Il y a un attribut central, le vecteur "vect", qui nous donne les variables des 3 dimensions. Il n'y a rien besoin de plus comme attributs pour représenter le vecteur3D.
    - Il y a 4 méthodes; 
        - La méthode set_coord(), qui prend un "unsigned int" et un "double", qui déterminent quelle dimension va être changée et la variable mise dans cette dimension du vecteur. Ceci est très pratique vu qu'on stocke nos valeurs dans un vecteur.
        - La méthode affiche(), qui retourne juste de manière jolie les valeurs dans le vecteur.
        - La méthode compare(), qui prend un Vecteur3D en paramètre, et qui boucle sur chaque dimension des vecteurs pour regarder si les valeurs sont les mêmes. Si elles ne le sont pas, les 2 vecteurs sont obligatoirement différents, sur nimporte quelle dimension !. La boucle est très pratique si l'on souhaite ajouter des dimensions, et évite du copiage de code.
        - La méthode get_vect(), qui retourne simplement le vecteur. Ceci est besoin si on souhaite faire une bonne encapsulation du programme.
    - Pour les droits d'accès, il y a juste le vecteur représentatif qui est privé (la méthode get_vect() est suffisante pour y accèder). Tout le reste est, de nature, publique, car il sert d'interface avec l'utilisateur.